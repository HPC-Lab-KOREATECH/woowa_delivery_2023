# GPS WPF CHANGES: 
# - amcl params where removed. They are not needed because global localization is provided
#   by an ekf node on robot_localization fusing gps data with local odometry sources
# - static layer is removed from both costmaps, in this tutorial we assume there is no map
#   of the environment
# - global costmap is set to be rolling to allow the robot to traverse big environment by
#   following successive relatively close waypoints that fit in a smaller rolling costmap

bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      #- nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      #- nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      #- nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      #- nav2_globally_updated_goal_condition_bt_node
      #- nav2_is_path_valid_condition_bt_node
      #- nav2_are_error_codes_active_condition_bt_node
      #- nav2_would_a_controller_recovery_help_condition_bt_node
      #- nav2_would_a_planner_recovery_help_condition_bt_node
      #- nav2_would_a_smoother_recovery_help_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      #- nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      #- nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      #- nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      #- nav2_controller_cancel_bt_node
      #- nav2_path_longer_on_approach_bt_node
      #- nav2_wait_cancel_bt_node
      #- nav2_spin_cancel_bt_node
      #- nav2_back_up_cancel_bt_node
      #- nav2_assisted_teleop_cancel_bt_node
      #- nav2_drive_on_heading_cancel_bt_node
      #- nav2_is_battery_charging_condition_bt_node
    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

controller_server:
  ros__parameters:
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: true
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.5
      yaw_goal_tolerance: 0.1
    # DWB parameters
    FollowPath:
      plugin: "nav2_rotation_shim_controller::RotationShimController"
      primary_controller: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      angular_dist_threshold: 0.785
      forward_sampling_distance: 2.0
      rotate_to_heading_angular_vel: 0.83
      max_angular_accel: 1000.83
      simulate_ahead_time: 2.0

      # # plugin: "dwb_core::DWBLocalPlanner"
      # debug_trajectory_details: True
      # min_vel_x: 0.0
      # min_vel_y: 0.0
      # max_vel_x: 2.0 #0.26
      # max_vel_y: 0.0
      # max_vel_theta: 0.83
      # min_speed_xy: 0.0
      # max_speed_xy: 2.0
      # min_speed_theta: 0.0
      # # Add high threshold velocity for turtlebot 3 issue.
      # # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      # acc_lim_x: 1.8
      # acc_lim_y: 0.0
      # acc_lim_theta: 0.83
      # decel_lim_x: -1.8
      # decel_lim_y: 0.0
      # decel_lim_theta: -0.83
      # vx_samples: 20
      # vy_samples: 5
      # vtheta_samples: 20
      # sim_time: 1.0
      # linear_granularity: 0.05
      # angular_granularity: 0.025
      # transform_tolerance: 0.2
      # xy_goal_tolerance: 0.25
      # trans_stopped_velocity: 0.25

      # short_circuit_trajectory_evaluation: True
      # stateful: True
      # critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      # BaseObstacle.scale: 2.0 # 0.02
      # PathAlign.scale: 32.0
      # PathAlign.forward_point_distance: 0.1
      # GoalAlign.scale: 24.0
      # GoalAlign.forward_point_distance: 0.1
      # PathDist.scale: 32.0
      # GoalDist.scale: 24.0
      # RotateToGoal.scale: 32.0
      # RotateToGoal.slowing_factor: 5.0
      # RotateToGoal.lookahead_time: -1.0
      # controller_patience: 2.0  # 경로 계획에 실패한 후 얼마나 기다릴지 결정 (초 단위)
      # max_retries: 100          # 최대 재시도 횟수

      # plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 2.0
      lookahead_dist: 1.5
      min_lookahead_dist: 2.0
      max_lookahead_dist: 3.0
      lookahead_time: 1.0
      rotate_to_heading_angular_vel: 0.83
      transform_tolerance: 0.5
      use_velocity_scaled_lookahead_dist: true
      min_approach_linear_velocity: 0.05
      approach_velocity_scaling_dist: 2.0
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 4.0
      use_regulated_linear_velocity_scaling: true
      use_fixed_curvature_lookahead: false
      curvature_lookahead_dist: 1.0
      use_cost_regulated_linear_velocity_scaling: true
      regulated_linear_scaling_min_radius: 0.5
      regulated_linear_scaling_min_speed: 0.1
      use_rotate_to_heading: false
      allow_reversing: true
      # rotate_to_heading_min_angle: 0.785
      # max_angular_accel: 1000.0
      # max_robot_pose_search_dist: 10.0
      use_interpolation: true

      # plugin: "nav2_mppi_controller::MPPIController"
      # time_steps: 56
      # model_dt: 0.05
      # batch_size: 2000
      # vx_std: 0.2
      # vy_std: 0.2
      # wz_std: 0.4
      # vx_max: 0.5
      # vx_min: -0.35
      # vy_max: 0.5
      # wz_max: 1.9
      # iteration_count: 1
      # prune_distance: 1.7
      # transform_tolerance: 0.1
      # temperature: 0.3
      # gamma: 0.015
      # motion_model: "DiffDrive"
      # visualize: false
      # reset_period: 1.0 # (only in Humble)
      # TrajectoryVisualizer:
      #   trajectory_step: 5
      #   time_step: 3
      # AckermannConstraints:
      #   min_turning_r: 0.2
      # critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      # ConstraintCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 4.0
      # GoalCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 5.0
      #   threshold_to_consider: 1.4
      # GoalAngleCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 3.0
      #   threshold_to_consider: 0.5
      # PreferForwardCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 5.0
      #   threshold_to_consider: 0.5
      # ObstaclesCritic:
      #   enabled: true
      #   cost_power: 1
      #   repulsion_weight: 1.5
      #   critical_weight: 20.0
      #   consider_footprint: false
      #   collision_cost: 10000.0
      #   collision_margin_distance: 0.1
      #   near_goal_distance: 0.5
      #   inflation_radius: 0.55 # (only in Humble)
      #   cost_scaling_factor: 10.0 # (only in Humble)
      # PathAlignCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 14.0
      #   max_path_occupancy_ratio: 0.05
      #   trajectory_point_step: 3
      #   threshold_to_consider: 0.5
      #   offset_from_furthest: 20
      #   use_path_orientations: false
      # PathFollowCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 5.0
      #   offset_from_furthest: 5
      #   threshold_to_consider: 1.4
      # PathAngleCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 2.0
      #   offset_from_furthest: 4
      #   threshold_to_consider: 0.5
      #   max_angle_to_furthest: 1.0
      #   mode: 0



# GPS WPF CHANGE: Remove static layer
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 2.0 # 5.0
      publish_frequency: 2.0 # 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 10
      height: 10
      resolution: 0.05
      robot_radius: 0.8 # 0.22
      plugins: ["voxel_layer","inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 0.1 # 3.0
        inflation_radius: 1.0 # 1.0
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 10.0
          obstacle_min_range: 0.0
      always_send_full_costmap: True

# GPS WPF CHANGE: Remove static layer
# GPS WPF CHANGE: Set rolling global costmap with 50x50 size. See note below
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 12.0
      publish_frequency: 12.0
      global_frame: map
      robot_base_frame: base_link
      robot_radius: 2.0 # 원래 3임
      resolution: 0.1
      # When using GPS navigation you will potentially traverse huge environments which are not practical to
      # fit on a big static costmap. Thus it is recommended to use a rolling global costmap large enough to 
      # contain each pair of successive waypoints. See: https://github.com/ros-planning/navigation2/issues/2174
      rolling_window: True
      width: 50
      height: 50
      track_unknown_space: true
      # no static map
      plugins: ["obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 15.0
          raytrace_min_range: 0.0
          obstacle_max_range: 15.0
          obstacle_min_range: 0.0
          # outdoors there will probably be more inf points
          inf_is_valid: true
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 0.1 # 3.0
        inflation_radius: 1.0 # 1.0
      always_send_full_costmap: True

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
# map_server:
#   ros__parameters:
#     yaml_filename: ""

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: true
      allow_unknown: true
      controller_patience: 2.0  # 경로 계획에 실패한 후 얼마나 기다릴지 결정 (초 단위)
      max_retries: 100           # 최대 재시도 횟수

smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    wait:
      plugin: "nav2_behaviors/Wait"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.83
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [2.0, 0.0, 0.83]
    min_velocity: [-2.0, 0.0, -0.83]
    max_accel: [1.8, 0.0, 0.83]
    max_decel: [-1.8, 0.0, -0.83]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
